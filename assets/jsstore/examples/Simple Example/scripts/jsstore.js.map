{"version":3,"sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/./src/main/config.ts","webpack://JsStore/./src/main/enums.ts","webpack://JsStore/./src/main/global.ts","webpack://JsStore/./src/main/helper.ts","webpack://JsStore/./src/main/index.ts","webpack://JsStore/./src/main/instance.ts","webpack://JsStore/./src/main/instance_helper.ts","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/main/util.ts"],"names":[],"mappings":"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","file":"jsstore.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main/index.ts\");\n","export class Config {\n    static isLogEnabled = false;\n    static isRuningInWorker = true;\n}","export enum ERROR_TYPE {\n    WorkerNotSupplied = \"worker_not_supplied\",\n    IndexedDbUndefined = \"indexeddb_undefined\"\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    IsDbExist = \"is_db_exist\",\n    GetDbVersion = \"get_db_version\",\n    GetDbList = \"get_db_list\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    GetDbSchema = \"get_db_schema\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    BulkInsert = \"bulk_insert\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    InitKeyStore = \"init_keystore\",\n    CloseDb = \"close_db\"\n}","import { Util } from \"./util\";\n\n/**\n *\n * supply sqlweb\n * @param {*} value\n */\nexport const useSqlWeb = (value) => {\n    Util.sqlWeb = value;\n};\n","import { Config } from \"./config\";\n\n/**\n * Enable log\n * \n */\nexport const enableLog = () => {\n    Config.isLogEnabled = true;\n};\n\n","export * from './instance';\nexport * from './enums';\nexport * from './config';\nexport * from './helper';\nexport * from './types';\n// export * from './model/index';\nexport * from './global';\nexport * from './interfaces';","import { API } from \"./enums\";\nimport { InstanceHelper } from \"./instance_helper\";\nimport {\n    SelectQuery, CountQuery, InsertQuery,\n    UpdateQuery, RemoveQuery, DbInfo, TranscationQuery\n} from \"./types\";\nimport { Config } from \"./config\";\nimport { SetQuery } from \"../worker/types\";\nimport { Util } from \"./util\";\nimport { IDataBase } from \"./interfaces\";\n\nexport class Instance extends InstanceHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     *  open database\n     * \n     * @param {string} dbName \n     * @returns \n     * @memberof Instance\n     */\n    openDb(dbName: string) {\n        this.activeDbName = dbName;\n        return this.pushApi<null>({\n            name: API.OpenDb,\n            query: dbName\n        });\n    }\n\n    /**\n     * creates DataBase\n     * \n     * @param {IDataBase} dataBase \n     * @returns \n     * @memberof Instance\n     */\n    initDb(dataBase: IDataBase) {\n        this.activeDbName = dataBase.name;\n        return this.pushApi<string[]>({\n            name: API.InitDb,\n            query: dataBase\n        });\n    }\n\n    /**\n     * drop dataBase\n     * \n     * @returns \n     * @memberof Instance\n     */\n    dropDb() {\n        return this.pushApi<null>({\n            name: API.DropDb,\n            query: null\n        });\n    }\n\n    /**\n     * select data from table\n     * \n     * @template T \n     * @param {SelectQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    select<T>(query: SelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     * \n     * @param {CountQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    count(query: CountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     * \n     * @param {InsertQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    insert<T>(query: InsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     * \n     * @param {UpdateQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    update(query: UpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     * \n     * @param {RemoveQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    remove(query: RemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     * \n     * @param {string} tableName \n     * @returns \n     * @memberof Instance\n     */\n    clear(tableName: string) {\n        return this.pushApi<null>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * insert bulk amount of data\n     * \n     * @param {InsertQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    bulkInsert(query: InsertQuery) {\n        return this.pushApi<null>({\n            name: API.BulkInsert,\n            query: query\n        });\n    }\n\n    /**\n     * set log status\n     * \n     * @param {boolean} status \n     * @memberof Instance\n     */\n    setLogStatus(status: boolean) {\n        Config.isLogEnabled = status ? status : Config.isLogEnabled;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: Config.isLogEnabled\n        });\n    }\n\n    /**\n     * get version of database\n     * \n     * @param {(string | DbInfo)} dbName \n     * @returns \n     * @memberof Instance\n     */\n    getDbVersion(dbName: string | DbInfo) {\n        return this.pushApi<number>({\n            name: API.GetDbVersion,\n            query: dbName\n        });\n    }\n\n    /**\n     * is database exist\n     * \n     * @param {(DbInfo | string)} dbInfo \n     * @returns \n     * @memberof Instance\n     */\n    isDbExist(dbInfo: DbInfo | string) {\n        return this.pushApi<boolean>({\n            name: API.IsDbExist,\n            query: dbInfo\n        });\n    }\n\n    /**\n     * returns list of database created\n     * \n     * @returns \n     * @memberof Instance\n     */\n    getDbList() {\n        return this.pushApi<string[]>({\n            name: API.GetDbList,\n            query: null\n        });\n    }\n\n    /**\n     * get Database Schema\n     * \n     * @param {string} dbName \n     * @returns \n     * @memberof Instance\n     */\n    getDbSchema(dbName: string) {\n        return this.pushApi<IDataBase>({\n            name: API.GetDbSchema,\n            query: dbName\n        });\n    }\n\n    /**\n     * get the value from keystore table\n     * \n     * @param {string} key \n     * @returns \n     * @memberof Instance\n     */\n    get(key: string) {\n        return this.pushApi<any>({\n            name: API.Get,\n            query: key\n        });\n    }\n\n    /**\n     * set the value in keystore table \n     * \n     * @param {string} key \n     * @param {*} value \n     * @returns \n     * @memberof Instance\n     */\n    set(key: string, value: any) {\n        return this.pushApi<any>({\n            name: API.Set,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Instance\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate,\n            query: null\n        });\n    }\n\n    /**\n     * execute the transaction\n     *\n     * @param {TranscationQuery} query\n     * @returns\n     * @memberof Instance\n     */\n    transaction(query: TranscationQuery) {\n        (query.logic as any) = query.logic.toString();\n        return this.pushApi<any>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    /**\n     * run sql code\n     *\n     * @param {(string | object)} query\n     * @returns {Promise<any>}\n     * @memberof Instance\n     */\n    runSql(query: string | object): Promise<any> {\n        const result = Util.sqlWeb.parseSql(query);\n        return this[result.api](result.data);\n    }\n}","import { LogHelper } from \"./log_helper\";\nimport { API } from \"./enums\";\nimport { WebWorkerRequest, WebWorkerResult } from \"./types\";\nimport { Config } from \"./config\";\n\ndeclare var JsStoreWorker;\nexport class InstanceHelper {\n  protected activeDbName: string;\n  private worker_: Worker;\n  private isDbOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer = -1000;\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.IsDbExist,\n    API.GetDbVersion,\n    API.GetDbList,\n    API.OpenDb,\n    API.GetDbSchema,\n    API.Get,\n    API.Set,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.InitKeyStore\n  ];\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      Config.isRuningInWorker = false;\n    }\n    this.initKeyStore_();\n  }\n\n  private initKeyStore_() {\n    if (Config.isRuningInWorker) {\n      this.prcoessExecutionOfQry_({\n        name: API.InitKeyStore,\n        onSuccess: function () {\n\n        },\n        onError: function (err) {\n          console.error(err);\n        }\n      }, 0);\n    }\n    else {\n      JsStoreWorker.KeyStore.init();\n    }\n\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      LogHelper.log(`request ${finishedRequest.name} finished`);\n      if (message.errorOccured) {\n        finishedRequest.onError(message.errorDetails);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isDbOpened_ = true; break;\n          case API.Terminate:\n            this.isDbOpened_ = false;\n            if (Config.isRuningInWorker === true) {\n              this.worker_.terminate();\n            }\n            break;\n          case API.CloseDb:\n            if (this.requestQueue_.length > 0) {\n              this.openDb_();\n            }\n            else {\n              this.isDbIdle_ = true;\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.returnedValue);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_() {\n    this.initKeyStore_();\n    this.prcoessExecutionOfQry_({\n      name: API.OpenDb,\n      query: this.activeDbName,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    }, 1);\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n\n    return new Promise((resolve, reject) => {\n      request.onSuccess = result => {\n        resolve(result as T);\n      };\n      request.onError = error => {\n        reject(error);\n      };\n      if (this.isDbIdle_ === true && this.isDbOpened_ === true) {\n        this.openDb_();\n      }\n      else {\n        clearTimeout(this.inactivityTimer);\n      }\n      this.prcoessExecutionOfQry_(request);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    LogHelper.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isDbOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isDbOpened_) {\n      this.inactivityTimer = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (Config.isRuningInWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this)).checkConnectionAndExecuteLogic(requestForWorker);\n    }\n\n  }\n}\n","\nimport { ERROR_TYPE } from \"./enums\";\nimport { Config } from \"./config\";\nimport { IError } from \"./interfaces\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private _info: any;\n\n    constructor(type: ERROR_TYPE, info: any = null) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    static log(msg) {\n        if (Config.isLogEnabled) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.WorkerNotSupplied:\n                errMsg = \"Worker object is not passed in instance constructor\";\n                break;\n            case ERROR_TYPE.IndexedDbUndefined:\n                errMsg = \"Browser does not support indexeddb\";\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { ISqlWeb } from \"./interfaces\";\n\n\nexport class Util {\n    private static sqlWeb_: ISqlWeb;\n\n    static get sqlWeb() {\n        return Util.sqlWeb_ == null ? window['SqlWeb'] : Util.sqlWeb_;\n    }\n\n    static set sqlWeb(value) {\n        Util.sqlWeb_ = value;\n    }\n\n\n}"],"sourceRoot":""}